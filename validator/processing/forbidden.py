from docx.shared import RGBColor
import re

forbiddens = {
    'words': [
        'достаточно', 'обязан', 'обязана', 'обязаны', 'в диапазоне', 'диапазон', 'диапазоны', 'шире', 'уже', 'должно', 'должен', 'должна', 'должны', 'быть', 'или', 'либо', 'и/или', 'может', 'другое', 'не ниже','эквивалент', 'эквивалентны', 'эквивалентно', 'эквивалентна', 'эквивалентный', 'эквивалентная', 'эквивалентные', 'эквивалентен', 'мин', 'min', 'минимум', 'минимально', 'минимальны', 'минимальный', 'минимальная', 'минимальные', 'минимальное', 'минимален', 'max', 'макс', 'мах', 'максимум', 'максимально', 'максимальный', 'максимальны', 'максимальная', 'максимальные', 'максимальное', 'максимален', 'более', 'больше', 'наибольший', 'наибольшая', 'наибольшие', 'наибольшее', 'наибольше', 'менее', 'меньше', 'наименьший', 'наименьшая', 'наименьшие', 'наименьше', 'наименьшее', 'прим.', 'примерно', 'примерная', 'примерный', 'примерные', 'прибл.', 'приблизительно', 'приблизительна', 'приблизительный', 'приблизительное', 'приблизительные', 'возм.', 'возможно', 'вероятно', 'около', 'в пределах', 'выше', 'свыше', 'превышать', 'превышает', 'превышают', 'превышающий', 'превышающая', 'превышающие', 'лучше', 'хуже', 'позднее', 'присутствует', 'присутствуют', 'допустимые', 'допустимый', 'допускать', 'допускающие', 'допускающие', 'допускающий','могут', 'желательно', 'желательны', 'желательные', 'желательная', 'надлежит', 'допускалось', 'надлежат', 'следует', 'следуют', 'от', 'до', 'следующий', 'следующие', 'следуюая', 'необходимо', 'необходимая', 'необходимые', 'необходимым', 'нужно', 'нужны', 'будет', 'будут',
    ],
    'symbols': [

    ]
}

def search(doc):
    _set_collor(doc)
    if doc.tables:
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    if cell.tables:
                        for table in cell.tables:
                            for row in table.rows:
                                for cell in row.cells:
                                    _set_collor(cell)
                    else:
                        _set_collor(cell)

def _set_collor(obj):
    color = RGBColor(0x44, 0x72, 0xc4)
    for paragraph in obj.paragraphs:
        for run in paragraph.runs:
            for forbidden in forbiddens['words']:
                regex = r'%s\W' % forbidden
                if re.search(regex, run.text):
                    run.font.color.rgb = color
